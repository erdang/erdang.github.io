(window.webpackJsonp=window.webpackJsonp||[]).push([[7],{430:function(e,n,l){e.exports=l.p+"assets/img/package.3ac2a1f0.png"},443:function(e,n,l){"use strict";l.r(n);var s=l(23),r=Object(s.a)({},(function(){var e=this,n=e.$createElement,s=e._self._c||n;return s("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[s("p",[s("code",[e._v("rollup.js")]),e._v("是Javascript的ES模块打包器，我们熟知的"),s("code",[e._v("Vue")]),e._v("、"),s("code",[e._v("Reac")]),e._v("t等诸多知名框架或类库都通过"),s("code",[e._v("rollup.js")]),e._v("进行打包。与"),s("code",[e._v("Webpack")]),e._v("偏向于应用打包的定位不同，"),s("code",[e._v("rollup.js")]),e._v("更专注于Javascript类库打包（虽然rollup.js也可以提供资源打包，但显然这不是它的强项）。在我们学习Vue和React等框架源码或者自己编写Javascript类库时，rollup.js是一条必经之路。")]),e._v(" "),s("p",[e._v("优点")]),e._v(" "),s("ul",[s("li",[e._v("不像webpack 配置比较繁琐")]),e._v(" "),s("li",[e._v("ejs 模式自动tree shaking")]),e._v(" "),s("li",[e._v("不会像webpack一样打包生成很多多余代码(webpack自定的require,factory函数等)")])]),e._v(" "),s("p",[e._v("常用来打包公共js库")]),e._v(" "),s("h2",{attrs:{id:"rollup-js的工作原理"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#rollup-js的工作原理"}},[e._v("#")]),e._v(" rollup.js的工作原理")]),e._v(" "),s("p",[e._v("rollup.js可以将我们自己编写的Javascript代码（通过插件可以支持更多语言，如Tyepscript）与第三方模块打包在一起，形成一个文件，该文件可以是一个库（Library）或者一个应用（App），在打包过程中可以应用各类插件实现特定功能。下图揭示了rollup.js的运行机制：")]),e._v(" "),s("p",[s("img",{attrs:{src:l(430),alt:"1"}})]),e._v(" "),s("h2",{attrs:{id:"安装rollup-js"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#安装rollup-js"}},[e._v("#")]),e._v(" 安装rollup.js")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",[s("code",[e._v("npm i rollup -g //全局安装\n")])])]),s("p",[e._v("通过rollup.config.js来配置rollup的打包规则, 使用的是esm语法")]),e._v(" "),s("p",[s("code",[e._v("input:")]),e._v(" 入口文件地址")]),e._v(" "),s("p",[s("code",[e._v("output:")])]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",[s("code",[e._v("output: {\n    file: 'bundles.js' // 输出文件\n    format: 'cjs' // 输出格式: cjs, umd, iife, es6, amd\n    // format为iife或者umd的时候必须配置, 会作为全局变量\n    // name: 'woyaoUtil',\n    sourcemap: true // 生成源码映射文件\n}\n")])])]),s("ul",[s("li",[e._v("amd – 异步模块定义，用于像RequireJS这样的模块加载器")]),e._v(" "),s("li",[e._v("cjs – CommonJS，适用于 Node 和 Browserify/Webpack")]),e._v(" "),s("li",[e._v("esm – 将软件包保存为 ES 模块文件，在现代浏览器中可以通过 "),s("code",[e._v("<script type=module>")]),e._v(" 标签引入")]),e._v(" "),s("li",[e._v("iife – 一个自动执行的功能，适合作为"),s("code",[e._v("<script>")]),e._v("标签。（如果要为应用程序创建一个捆绑包，您可能想要使用它，因为它会使文件大小变小。）")]),e._v(" "),s("li",[e._v("umd – 通用模块定义，以amd，cjs 和 iife 为一体")]),e._v(" "),s("li",[e._v("system - SystemJS 加载器格式")])]),e._v(" "),s("p",[s("code",[e._v("plugins")]),e._v(":")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",[s("code",[e._v("plugins: [\n    resolve(),\n    commonjs()\n]\n// rollup typescript配置处理\n`@rollup/plugin-typescript`\n/*\n* 帮助寻找node_modules里的包\n* rollup.js编译源码中的模块引用默认只支持ES6+的模块方式import/export。\n* 然而大量的npm模块是基于CommonJS模块方式，这就导致了大量 npm 模块不能直接编译使用。\n* 所以辅助rollup.js编译支持npm模块和CommonJS模块方式的插件就应运而生\n*/\n`@rollup/plugin-node-resolve`\n// 支持import 'xx.json'文件\n`@rollup/plugin-json`\n// 在打包的时候把目标字符串替换å\n`@rollup/plugin-replace`\n// 对打包的js进行压缩\n`rollup-plugin-terser`\n// 删除原来的bundle\n`rollup-plugin-delete`\n// 显示打包后文件的大小\n`rollup-plugin-filesize`\n// 将CommonJs语法转成es5\n`rollup-plugin-commonjs`\n// rollup 的 babel 插件，ES6转ES5\n`rollup-plugin-babel`\n")])])]),s("p",[s("code",[e._v("external")])]),e._v(" "),s("p",[e._v("告诉rollup不要把第三方库进行打包，而是作为外部依赖, 配合”peerDependencies“使用， 这样业务代码引入我们的公共库的时候避免了重复下载")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",[s("code",[e._v("// 第三方esm 语法的包\nconst external = [/lodash-es\\/[a-z]+/, 'ts-date', 'classnames']\n// 第三方cjs 语法的包\nconst cjsExteranl = ['classnames']\n")])])]),s("p",[s("code",[e._v("global")])]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",[s("code",[e._v("globals: {\n        'react': 'React',\n        'react-dom': 'ReactDOM'\n}\n")])])]),s("p",[e._v("package.json中需要注意的点:")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",[s("code",[e._v('"module" // 打包的esm规范的bundle设置入口\n"peerDependencies" // 第三方库应该在这里强调依赖的版本\n"scripts": {\n    "build": "rollup -c",\n    "build:dev": "npm run clean && env_type=development npm run build",\n    "build:prod": "npm run clean && env_type=production npm run build",\n    "clean": "rimraf umd"\n}\n')])])]),s("p",[e._v("生成umd bundle的例子")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",[s("code",[e._v("import nodeResolve from '@rollup/plugin-node-resolve'\nimport replace from '@rollup/plugin-replace'\nimport { terser } from 'rollup-plugin-terser'\nimport filesize from 'rollup-plugin-filesize'\nimport commonjs from '@rollup/plugin-commonjs'\nimport { babel } from '@rollup/plugin-babel'\n\nconst env = process.env.env_type\nconst isProdEnv = env === 'production'\n\nconst config = {\n    input: 'src/index.js',\n    external: ['react', 'react-dom'],\n    output: {\n        name: 'WoyaoUtil',\n        file: 'umd/woyao-util.js',\n        format: 'umd',\n        sourcemap: true\n    }\n}\n\nconst plugins = [\n    nodeResolve(),\n    babel({\n        exclude: '**/node_modules/**',\n        babelHelpers: 'bundled'\n    }),\n    isProdEnv && filesize(),\n    replace({\n        'process.env.NODE_ENV': JSON.stringify(env)\n    }),\n    commonjs(),\n    isProdEnv && terser()\n].filter(Boolean)\n\nconfig.plugins = plugins\n\nexport default config\n")])])]),s("p",[s("code",[e._v("babelHelpers")])]),e._v(" "),s("p",[e._v("Type: 'bundled' | 'runtime' | 'inline' | 'external'")]),e._v(" "),s("p",[e._v("Default: 'bundled'")]),e._v(" "),s("ul",[s("li",[e._v("'runtime' - 如果你要用rollup构建一个js包的时候，使用该配置，该配置要结合@babel/plugin-transform-runtime插件使用，使用@babel/plugin-transform-runtime也要安装@babel/runtime插件")]),e._v(" "),s("li",[e._v("'bundled' - 如果用rollup构建一个项目的用此参数")]),e._v(" "),s("li",[e._v("'inline' 官网不推荐使用，会导致很多重复性代码")]),e._v(" "),s("li",[e._v("'external' 要结合@babel/plugin-external-helpers插件使用，它会把helpers 收集到一个共享模块，我的理解是相当于runtime和bundled一个集合，就是把helpers 抽到一个全局的共享模块但是又不会造成全局的污染")])]),e._v(" "),s("p",[e._v("babel需要作如下配置:")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",[s("code",[e._v('{\n    "presets": [\n        [\n            "@babel/preset-env",\n            {\n                // 设置为false, 否则babel会在rollup有机会执行其操作之前导致我们的模块转化为commonjs\n                "modules": false,\n            // polyfill按需引入\n                "useBuiltIns": "usage",\n                "corejs": 3\n            }\n        ],\n        "@babel/preset-react"\n    ]\n}\n')])])]),s("p",[e._v("不过我们实际开发并不会打包成umd格式的文件，因为umd格式的包文件很大。")]),e._v(" "),s("p",[e._v("一般会分开打包一个cjs包和一个es包。然后把cjs包写进package.json的main属性，")]),e._v(" "),s("p",[e._v("把es包写进package.json的module属性")]),e._v(" "),s("h2",{attrs:{id:"typescript-配置"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#typescript-配置"}},[e._v("#")]),e._v(" typescript 配置")]),e._v(" "),s("p",[e._v("需要安装下面几个包:")]),e._v(" "),s("ul",[s("li",[e._v("typescript")]),e._v(" "),s("li",[e._v("@rollup/plugin-typescript")]),e._v(" "),s("li",[e._v("tslib")])]),e._v(" "),s("p",[e._v("例子")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",[s("code",[e._v("import typescript from '@rollup/plugin-typescript'\n\n const plugins = [\n    typescript({\n        declaration: false\n    }),\n    nodeResolve(),\n    commonjs(),\n    replace({\n        'process.env.NODE_ENV': JSON.stringify(env)\n    }),\n    babel({\n        exclude: '**/node_modules/**',\n        babelHelpers: 'bundled'\n    }),\n    isProdEnv && filesize(),\n    isProdEnv && terser()\n].filter(Boolean)\n")])])]),s("p",[e._v("typescript的配置文件tsconfig.json一般如下:")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",[s("code",[e._v('{\n    "compilerOptions": {\n        "allowUnreachableCode": true, // 不报告执行不到的代码错误。\n        "allowUnusedLabels": false, // 不报告未使用的标签错误\n        "alwaysStrict": false, // 以严格模式解析并为每个源文件生成 "use strict"语句\n        "baseUrl": ".", // 工作根目录\n        "experimentalDecorators": true, // 启用实验性的ES装饰器\n        "jsx": "react", // 在 .tsx文件里支持JSX\n        "sourceMap": true, // 是否生成map文件\n        "module": "ES2015", // 指定生成哪个模块系统代码\n        "noImplicitAny": false, // 是否默认禁用 any\n        "removeComments": true, // 是否移除注释\n        "target": "ESNext", // 编译的目标是什么版本的\n        "outDir": "./dist", // 输出目录\n        "declaration": true, // 是否自动创建类型声明文件\n        "declarationDir": "./ts/lib", // 类型声明文件的输出目录\n        "allowJs": true, // 允许编译javascript文件。\n        "moduleResolution": "node",\n        "allowSyntheticDefaultImports": true,\n        "lib": [ // 编译过程中需要引入的库文件的列表\n            "es5",\n            "es2015",\n            "es2016",\n            "es2017",\n            "es2018",\n            "dom"\n        ]\n    },\n    // 指定一个匹配列表（属于自动指定该路径下的所有ts相关文件）\n    "include": [\n        "src/**/*"\n    ],\n    // 指定一个排除列表（include的反向操作）\n    "exclude": [\n        "node_modules",\n        "dist"\n    ]\n}\n')])])]),s("h2",{attrs:{id:"编译css"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#编译css"}},[e._v("#")]),e._v(" 编译css")]),e._v(" "),s("p",[e._v("rollup-plugin-postcss")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",[s("code",[e._v("import postcss from 'rollup-plugin-postcss'\n\nconst plugins = [\n    typescript(),\n    nodeResolve(),\n    commonjs(),\n    replace({\n        'process.env.NODE_ENV': JSON.stringify(env)\n    }),\n    babel({\n        exclude: '**/node_modules/**',\n        babelHelpers: 'bundled'\n    }),\n    postcss(),\n    isProdEnv && filesize(),\n    isProdEnv && terser()\n].filter(Boolean)\n")])])]),s("h2",{attrs:{id:"开启本地服务器"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#开启本地服务器"}},[e._v("#")]),e._v(" 开启本地服务器")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",[s("code",[e._v("npm install rollup-plugin-serve --save-dev\n")])])]),s("p",[e._v("记得配置sourcemap: true,这样调试代码方便。")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",[s("code",[e._v("import babel from '@rollup/plugin-babel'\nimport resolve from '@rollup/plugin-node-resolve'\nimport typescript from '@rollup/plugin-typescript'\nimport commonjs from '@rollup/plugin-commonjs'\nimport { terser } from 'rollup-plugin-terser'\nimport postcss from 'rollup-plugin-postcss'\nimport serve from 'rollup-plugin-serve'\nimport livereload from 'rollup-plugin-livereload'\n\nexport default {\ninput: './src/main',\noutput: {\n    file: './dist/bundle.js',\n    format: 'cjs',\n    name: 'bundleName',\n    sourcemap: true\n},\nplugins: [\n    typescript(),\n    resolve(),\n    commonjs(),\n    babel({\n        exclude: 'node_modules/**'\n    }),\n    terser(),\n    postcss(),\n    livereload(),\n    serve({\n        open: true,\n        contentBase: 'dist'\n    })\n],\nexternal: ['lodash']\n}\n\nnpm install rollup-plugin-livereload --save-dev\n热更新\n\n\"scripts\": {\n    \"build\": \"rollup --config\",\n    \"dev\": \"rollup --config -w\"\n},")])])])])}),[],!1,null,null,null);n.default=r.exports}}]);