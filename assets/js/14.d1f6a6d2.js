(window.webpackJsonp=window.webpackJsonp||[]).push([[14],{444:function(n,s,e){"use strict";e.r(s);var t=e(23),r=Object(t.a)({},(function(){var n=this,s=n.$createElement,e=n._self._c||s;return e("ContentSlotsDistributor",{attrs:{"slot-key":n.$parent.slotKey}},[e("h2",{attrs:{id:"创建并初始化github项目"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#创建并初始化github项目"}},[n._v("#")]),n._v(" 创建并初始化Github项目")]),n._v(" "),e("ol",[e("li",[e("p",[n._v("创建Git提交忽略配置 .gitignore")])]),n._v(" "),e("li",[e("p",[n._v("创建开源协议声明 LICENSE")])]),n._v(" "),e("li",[e("p",[n._v("初始化package.json")])]),n._v(" "),e("li",[e("p",[n._v("配置TypeScript tsconfig.json")])]),n._v(" "),e("li",[e("p",[n._v("配置eslint")])]),n._v(" "),e("li",[e("p",[n._v("配置Rollup rollup.config.js")])]),n._v(" "),e("li",[e("p",[n._v("配置jest")])])]),n._v(" "),e("h3",{attrs:{id:"_1-git提交忽略配置"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_1-git提交忽略配置"}},[n._v("#")]),n._v(" 1 Git提交忽略配置")]),n._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[n._v("touch .gitignore 加入以下内容\n\n# dependencies\n/node_modules\n\n# compiled output\n/dist\n")])])]),e("h3",{attrs:{id:"_2-创建开源协议声明-license"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2-创建开源协议声明-license"}},[n._v("#")]),n._v(" 2 创建开源协议声明 LICENSE")]),n._v(" "),e("p",[n._v("创建Github仓库时选择，也可以创建仓库之后再加，一般选择MIT协议")]),n._v(" "),e("h3",{attrs:{id:"_3-初始化package-json"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_3-初始化package-json"}},[n._v("#")]),n._v(" 3 初始化package.json")]),n._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[n._v("npm init \n")])])]),e("p",[n._v("增加-y参数是不想一直按Enter")]),n._v(" "),e("h3",{attrs:{id:"_4-配置typescript-tsconfig-json"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_4-配置typescript-tsconfig-json"}},[n._v("#")]),n._v(" 4 配置TypeScript tsconfig.json")]),n._v(" "),e("h4",{attrs:{id:"安装tsc"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#安装tsc"}},[n._v("#")]),n._v(" 安装tsc")]),n._v(" "),e("p",[n._v("我们可以使用tsc命令行工具快速创建TypeScript默认配置文件。")]),n._v(" "),e("p",[n._v("先确认下是否安装tsc，输入命令：")]),n._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[n._v("tsc -v\n")])])]),e("h4",{attrs:{id:"生成tsconfig-json配置文件"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#生成tsconfig-json配置文件"}},[n._v("#")]),n._v(" 生成tsconfig.json配置文件")]),n._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[n._v("tsc --init 默认的\n")])])]),e("h3",{attrs:{id:"_5-配置eslint"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_5-配置eslint"}},[n._v("#")]),n._v(" 5 配置eslint")]),n._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[n._v("yarn add -D eslint @typescript-eslint/parser @typescript-eslint/eslint-plugin \n")])])]),e("p",[n._v("目录结构")]),n._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[n._v("ls-tools\n|- .eslintignore\n|- .eslintrc.js\n|- tsconfig.eslint.json\n")])])]),e("p",[n._v("tsconfig.eslint.json 我们根目录中增加了一个 tsconfig 文件，它将用于 eslintrc.parserOptions.project ，由于该配置要求 incude 每个 ts、js 文件。而我们仅需要打包 src 目录下的代码，所以增加了该配置文件")]),n._v(" "),e("p",[n._v("如果 eslintrc.parserOptions.project 配置为 tsconfig.json 。src 文件以外的 ts、js 文件都会报错。")]),n._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[n._v('Parsing error: "parserOptions.project" has been set for @typescript-eslint/parser.\nThe file does not match your project config: config.ts.\nThe file must be included in at least one of the projects provided.eslint\n')])])]),e("p",[n._v("复制代码虽然可以配置 eslintrc.parserOptions.createDefaultProgram 但会造成巨大的性能损耗。")]),n._v(" "),e("h4",{attrs:{id:"配置-tsconfig-eslint-json"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#配置-tsconfig-eslint-json"}},[n._v("#")]),n._v(" 配置 tsconfig.eslint.json")]),n._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[n._v('/* tsconfig.eslint.json */\n{\n    "compilerOptions": {\n        "baseUrl": ".",\n        "resolveJsonModule": true,\n    },\n    "include": [\n        "**/*.ts",\n        "**/*.js"\n    ]\n}\n')])])]),e("h4",{attrs:{id:"配置-eslintrc-js"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#配置-eslintrc-js"}},[n._v("#")]),n._v(" 配置 .eslintrc.js")]),n._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[n._v("// .eslintrc.js\nconst eslintrc = {\n    parser: '@typescript-eslint/parser', // 使用 ts 解析器\n    extends: [\n        'eslint:recommended', // eslint 推荐规则\n        'plugin:@typescript-eslint/recommended', // ts 推荐规则\n    ],\n    plugins: [\n        '@typescript-eslint',\n    ],\n    env: {\n        browser: true,\n        node: true,\n        es6: true,\n    },\n    parserOptions: {\n        project: './tsconfig.eslint.json',\n        ecmaVersion: 2019,\n        sourceType: 'module',\n        ecmaFeatures: {\n        experimentalObjectRestSpread: true\n        }\n    },\n    rules: {}, // 自定义\n}\n\nmodule.exports = eslintrc\n")])])]),e("h3",{attrs:{id:"_6-配置rollup-rollup-config-js"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_6-配置rollup-rollup-config-js"}},[n._v("#")]),n._v(" 6 配置Rollup rollup.config.js")]),n._v(" "),e("p",[n._v("安装 rollup 以及要用到的插件")]),n._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[n._v("yarn add -D rollup @rollup/plugin-babel @rollup/plugin-commonjs @rollup/plugin-eslint @rollup/plugin-node-resolve @rollup/plugin-typescript rollup-plugin-terser \n")])])]),e("p",[n._v("TypeScript相关依赖： tslib typescript")]),n._v(" "),e("p",[n._v("安装 babel 相关的库")]),n._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[n._v("yarn add -D @babel/preset-env @babel/core\n")])])]),e("p",[n._v("配置 .babelrc")]),n._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[n._v('{\n    "presets": [\n        [\n        "@babel/preset-env",\n        {\n            /* Babel 会在 Rollup 有机会做处理之前，将我们的模块转成 CommonJS，导致 Rollup 的一些处理失败 */\n            "modules": false\n        }\n        ]\n    ],\n    "plugins": ["@babel/plugin-transform-runtime"]\n    //"\n}\n')])])]),e("p",[n._v("配置 rollup.config.js")]),n._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[n._v("import path from 'path'\nimport typescript from '@rollup/plugin-typescript'\nimport babel from '@rollup/plugin-babel'\nimport resolve from '@rollup/plugin-node-resolve'\nimport commonjs from '@rollup/plugin-commonjs'\nimport { eslint } from '@rollup/plugin-eslint'\nimport { DEFAULT_EXTENSIONS } from '@babel/core'\n\nimport pkg from './package.json'\n\nconst paths = {\n    input: path.join(__dirname, '/src/index.ts'),\n    output: path.join(__dirname, '/lib'),\n}\n\n// rollup 配置项\nconst rollupConfig = {\n    input: paths.input,\n    output: [\n        // 输出 commonjs 规范的代码\n        {\n            file: path.join(paths.output, 'index.js'),\n            format: 'cjs',\n            name: pkg.name,\n        },\n        // 输出 es 规范的代码\n        {\n            file: path.join(paths.output, 'index.esm.js'),\n            format: 'es',\n            name: pkg.name,\n        },\n    ],\n    // external: ['lodash'], // 指出应将哪些模块视为外部模块，如 Peer dependencies 中的依赖\n    // plugins 需要注意引用顺序\n    plugins: [\n        // 验证导入的文件\n        eslint({\n            throwOnError: true, // lint 结果有错误将会抛出异常\n            throwOnWarning: true,\n            include: ['src/**/*.ts'],\n            exclude: ['node_modules/**', 'lib/**', '*.js'],\n        }),\n\n        // 使得 rollup 支持 commonjs 规范，识别 commonjs 规范的依赖\n        commonjs(),\n\n        // 配合 commnjs 解析第三方模块\n        resolve({\n        // 将自定义选项传递给解析插件\n            customResolveOptions: {\n                moduleDirectory: 'node_modules',\n            },\n        }),\n        typescript(),\n        babel({\n            runtimeHelpers: true,\n            // 只转换源代码，不运行外部依赖\n            exclude: 'node_modules/**',\n            // babel 默认不支持 ts 需要手动添加\n            extensions: [\n                ...DEFAULT_EXTENSIONS,\n                '.ts',\n            ],\n        }),\n    ],\n}\n\nexport default rollupConfig\n")])])]),e("h3",{attrs:{id:"_7-配置-jest"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_7-配置-jest"}},[n._v("#")]),n._v(" 7 配置 jest")]),n._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[n._v("yarn add -D @types/jest eslint-plugin-jest jest ts-jest\n")])])]),e("p",[n._v("目录")]),n._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[n._v("ls-tools\n    |- test\n        |- index.test.ts\n    |- jest.config.js\n")])])]),e("p",[n._v("配置 jest.config.js")]),n._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[n._v("// jest.config.js\nmodule.exports = {\n    preset: 'ts-jest',\n    testEnvironment: 'node',\n}\n")])])]),e("p",[n._v("再配置 eslint")]),n._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[n._v("const eslintrc = {\n    // ...\n    extends: [\n        // ...\n        'plugin:jest/recommended',\n    ],\n    plugins: [\n        // ...\n        'jest',\n    ],\n    // ...\n}\n")])])]),e("p",[n._v("增加 package.json scripts")]),n._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[n._v('"test": "jest --coverage --verbose -u"\n')])])]),e("ul",[e("li",[e("p",[n._v("coverage 输出测试覆盖率")])]),n._v(" "),e("li",[e("p",[n._v("verbose 层次显示测试套件中每个测试的结果，会看着更加直观啦")]),n._v(" "),e("p",[n._v("yarn test\n=")])])])])}),[],!1,null,null,null);s.default=r.exports}}]);