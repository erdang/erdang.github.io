(window.webpackJsonp=window.webpackJsonp||[]).push([[6],{429:function(e,n,t){e.exports=t.p+"assets/img/640.60b18676.jpeg"},440:function(e,n,t){"use strict";t.r(n);var r=t(23),a=Object(r.a)({},(function(){var e=this,n=e.$createElement,r=e._self._c||n;return r("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[r("h2",{attrs:{id:"babel-编译的三个阶段"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#babel-编译的三个阶段"}},[e._v("#")]),e._v(" Babel 编译的三个阶段")]),e._v(" "),r("p",[r("img",{attrs:{src:t(429),alt:"1"}})]),e._v(" "),r("p",[r("code",[e._v("Babel")]),e._v(" 是一个 "),r("code",[e._v("JavaScript")]),e._v(" "),r("code",[e._v("TypeScript")]),e._v(" 编译器")]),e._v(" "),r("p",[e._v("Babel 的编译过程可分为三个阶段")]),e._v(" "),r("ul",[r("li",[r("p",[e._v("解析 "),r("code",[e._v("Parse")]),e._v(": 将代码解析成"),r("code",[e._v("AST")]),e._v(" 抽象语法树,就是对"),r("code",[e._v("JS")]),e._v("代码进行语法分析和词法分析")])]),e._v(" "),r("li",[r("p",[e._v("转换 "),r("code",[e._v("Transform")]),e._v(": 对抽象语法树进行转换操作，主要是添加、移除以及更新")])]),e._v(" "),r("li",[r("p",[e._v("生成 "),r("code",[e._v("Generate")]),e._v(": 根据变换后的抽象语法树再生成代码字符串")])])]),e._v(" "),r("h3",{attrs:{id:"parse-解析"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#parse-解析"}},[e._v("#")]),e._v(" Parse 解析")]),e._v(" "),r("p",[r("code",[e._v("Babel")]),e._v(" 会把源代码抽象出来，变成 "),r("code",[e._v("AST")]),e._v("。")]),e._v(" "),r("p",[r("code",[e._v("AST")]),e._v(" 移步下一篇")]),e._v(" "),r("h3",{attrs:{id:"转换-transform"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#转换-transform"}},[e._v("#")]),e._v(" 转换 Transform")]),e._v(" "),r("p",[e._v("插件应用于 Babel 的转译过程。如果不使用任何插件，那么 Babel 会原样输出代码。")]),e._v(" "),r("h3",{attrs:{id:"生成-generate"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#生成-generate"}},[e._v("#")]),e._v(" 生成 Generate")]),e._v(" "),r("p",[e._v("用 babel-generator 通过 AST 树生成 ES5 代码。")]),e._v(" "),r("h2",{attrs:{id:"实现一个简单的按需打包功能"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#实现一个简单的按需打包功能"}},[e._v("#")]),e._v(" 实现一个简单的按需打包功能")]),e._v(" "),r("p",[r("code",[e._v("ElementUI")]),e._v(" 中把 import { Button } from 'element-ui' 转成 import Button from 'element-ui/lib/button'")]),e._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",[r("code",[e._v('// import { Button } from \'element-ui\'\n{\n    "type": "Program",\n    "body": [        \n         {   "type": "ImportDeclaration",            \n             "specifiers": [\n                 { \n                    "type": "ImportSpecifier",                    \n                    "local": {                        \n                            "type": "Identifier",                       \n                             "name": "Button"                    \n                        },                    \n                    "imported": {                        \n                            "type": "Identifier",                        \n                            "name": "Button"                   \n                         }                \n                }            \n            ],            \n\n        "source": {                \n                "type": "Literal",                \n                "value": "element-ui",                \n                "raw": "\'element-ui\'"            \n            }        \n        }   \n    ],\n    "sourceType": "module"\n}\n\n// import Button from \'element-ui/lib/button\'\n\n{\n    "type": "Program",\n    "body": [        \n         {   "type": "ImportDeclaration",            \n             "specifiers": [\n                 {                   \n                     "type": "ImportDefaultSpecifier",                    \n                     "local": {                        \n                            "type": "Identifier",                        \n                            "name": "Button"                   \n                         }                \n                    }\n\n            ],            \n\n        "source": {               \n             "type": "Literal",               \n             "value": "element-ui/lib/button",                \n            "raw": "\'element-ui/lib/button\'"            \n        }\n\n\n        }   \n    ],\n    "sourceType": "module"\n}\n')])])]),r("p",[e._v("specifiers 的 type 和 source 的 value、raw 不同")]),e._v(" "),r("p",[e._v("ElementUI 官方文档中，babel-plugin-component 的配置如下：")]),e._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",[r("code",[e._v('// 如果 plugins 名称的前缀为 \'babel-plugin-\'，你可以省略 \'babel-plugin-\' 部分\n{  "presets": [\n        ["es2015", { "modules": false }]\n    ],  \n    "plugins": [    \n        [      "component",      \n                {        \n                    "libraryName": "element-ui",        \n                    "styleLibraryName": "theme-chalk"      \n                }   \n        ]  \n    ]\n}\n')])])]),r("p",[e._v("直接干")]),e._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",[r("code",[e._v("import * as babel from '@babel/core'\n\nconst str = `import { Button } from 'element-ui'`\nconst { result } = babel.transform(str, {\n    plugins: [\n        function({types: t}) {\n            return {\n                 visitor: {\n                      ImportDeclaration(path, { opts }) {\n                          const { node: { specifiers, source } } = path\n                           // 比较 source 的 value 值 与配置文件中的库名称\n                            if (source.value === opts.libraryName) {\n                                const arr = specifiers.map(specifier => (\n                                    t.importDeclaration(\n                                        [t.ImportDefaultSpecifier(specifier.local)],\n                                        // 拼接详细路径\n                                        t.stringLiteral(`${source.value}/lib/${specifier.local.name}`)\n                                     )\n                                ))\n                                path.replaceWithMultiple(arr)\n                            }\n                        }\n                    }\n                }\n            }\n    ]\n}\n")])])])])}),[],!1,null,null,null);n.default=a.exports}}]);